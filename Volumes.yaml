apiVersion: v1
kind: PersistentVolume
metadata:
  name: mangodb-pv
spec:
  accessModes:
  - ReadWriteMany
  capacity:
    storage: 10Gi
  persistentVolumeReclaimPlocy: Retain
  awsElasticBlockStore:
    volumeID: volume-id
    fsType: xfs

# In Cloud first you have create a disk then only we can use it in static provisioning 
---

# for hostpath

apiVersion: v1
kind: PersistentVolume
metadata:
  name: tableau-pv
spec:
  capacity:
    storage: 5Gi
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /opt/tableau
    type: DirectoryOrCreate

---

#Claiming Persistent Volume
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tableau-pvc
spec:
  storageClassName: ""
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---

#Assiging the claim to the pod

apiVersion: v1
kind: Pod
metadata:
  name: tableau-pvc-claim
  labels:
    app: tableau-pvc-claim
spec:
  volumes:
  - name: tableau
    persistentVolumeClaim:
      claimName: tableau-pvc
  containers:
  - name: tableau
    image: nginx
    volumeMounts:
    - name: tableau
      mountPath: /opt


# Reclaim Policies

# Retain: This won't delete any data from the disk once the pod is deleted
#         If you want to use the same disk to another pod then you have to manually delete the PV
#         Once PV is deleted you have to create a new PV & PVC and attach it to pod to use the same data
# This means if you use retain policy, eventhough if we delete the pod, pv won't deleted, underlying disk won't get deleted, and also the data also won't get deletd.
# Only problem here is Admin has to manually delete the pv and need to create a new PV, if we don't want disk any more then we have to delete the disk from cloud vendor manually


# Delete: This will delete the data in it and also it will delete the PV and also it will delete the disk from cloud provider
# This is the default policy for storage class

#Recycle: This is depricated one
# This will delete the entire data in the disk and it will allow other PVC to claim it again.


apiVersion: v1
kind: Pod 
metadata:
  name: nginx-volume
  labels:
    app: nginx
spec:
  volumes:
  - name: nginxvolume
    hostPath:
      path: /opt/nginx
      type: Directory
  containers: 
    name: nginx-pod
    image: nginx 
    volumeMounts:
      - name:  nginxvolume
        mountPath: /opt

---
apiVersion: v1
kind: Pod
metadata:
  name: emptydir
  labels:
    app: nginx
spec:
  volumes:
  - name: emptydir
    emptyDir: {}
  containers:
  - name: nginx-emptydir
    image: nginx:latest
    command: ['/bin/bash']
    args: ['-c', 'echo "Hola"']
    volumeMounts:
    - name: emptydir
      mountPath: /usr/share/nginx/html
---

apiVersion: v1
kind: Pod
metadata:
  name: tableau-volume
  labels:
    app: tableau
spec:
  containers:
    - name: tableau
      image: krishnakishore27/tableau:tableau-server-2023.3.2
      volumeMounts:
        - name:  tableau-volume
          mountPath: /srv
  volumes:
    - name: tableau-volume   # same as the name of volumemounts
      hostPath:
        path:  /root/kishore
        type: directory
      persistentVolumeClaim:
      claimName: mypvc

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mypv
spec:
  storageClassName: manual
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /tmp/data

# To Create a PV we have to run the command kubectl apply -f .
# To crosscheck the PVS we have to use the command "kubectl get pv"

---

# This yaml is to claim the volume

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mypvc
spec:
  resources:
    requests:
      storage: 10Gi
  storageClassName: manual
  accessModes:
    - ReadWriteOnce

---

apiVersion: v1
kind: Pod
metadata:
  name: tableau-volume
  labels:
    app: tableau
spec:
  containers:
    - name: tableau
      image: krishnakishore27/tableau:tableau-server-2023.3.2
      volumeMounts:
        - name:  tableau-volume
          mountPath: /srv
  volumes:
    - name: tableau-volume   # same as the name of volumemounts
      PersistentVolumeClaim:
        claimName: mypvc  #It should match the PersistentVolumeClaim name in metadata

---

apiVersion: v1
kind: Pod
spec:
  name: security-context
  labels:
    app: tableau
  containers:
    - name: tableau-server
      image: krishnakishore27/tableau:tableau-server-2023.3.2
  securityContext:
    runAsUser: 1000
    runAsGroup: 3000


---

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: tableau-server
  labels:
    app: tableau
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tableau-server
  template:
    metadata:
      labels:
        app: tableau-server
    spec:
      containers:
        - name: tableau-server-new
          image: krishnakishore27/tableau:tableau-server-2023.3.2
          env:
            - name: LICENSE_KEY
              value: TSVK-THIS-DATA-GOES-HARD
            - name: TABLEAU_USERNAME
              value: admin
            - name: TABLEAU_PASSWORD
              value: admin
            - name: TSM_REMOTE_USERNAME
              value: root
            - name: TSM_REMOTE_PASSWORD
              value: Kishore@98
          volumeMounts:
            - name: myvolume
              mountPath: /opt/tableau/tableau_server
      volumes:
        - name:  myvolume
          persistentVolumeClaim:
            claimName: mypvc

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: tableau-server
spec:
  serviceName: tableau-service
  replicas: 3
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: tableauserver
        image: krishnakishore27/tableau:tableau-server-2023.3.2
        env:
            - name: LICENSE_KEY
              value: TSVK-THIS-DATA-GOES-HARD
            - name: TABLEAU_USERNAME
              value: admin
            - name: TABLEAU_PASSWORD
              value: admin
            - name: TSM_REMOTE_USERNAME
              value: root
            - name: TSM_REMOTE_PASSWORD
              value: Kishore@98
            - name: EXT_REP_JSON_FILE
              value: /docker/external-repository/config.json
        volumeMounts:
            - name: myvolume
              mountPath: /opt/tableau/tableau_server
      volumes:
        - name:  myvolume
          persistentVolumeClaim:
            claimName: mypvc

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  serviceName: "mysql"
  replicas: 3
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: my-secret-pw
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
  volumeClaimTemplates:
  - metadata:
      name: mysql-storage  # Name of the PVC
    spec:
      accessModes:
      - ReadWriteOnce  # Each pod can mount its volume as read-write
      resources:
        requests:
          storage: 1Gi  # Requesting 1Gi of storage for each replica


